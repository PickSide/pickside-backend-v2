datasource db {
    provider     = "mysql"
    url          = "file:dev.db" //env("DSN")
    relationMode = "prisma"
}

generator db {
    provider = "go run github.com/steebchen/prisma-client-go"
}

model Activity {
    id           String           @id @default(cuid())
    address      String
    date         DateTime
    description  String?
    isPrivate    Boolean          @default(false)
    maxPlayers   Int
    price        Float
    rules        String
    sportId      String
    time         DateTime
    title        String
    userId       String?
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    participants UserInActivity[]
    User         User?            @relation(fields: [userId], references: [id])
    sport        Sport            @relation(fields: [sportId], references: [id])
}

model Chatroom {
    id               String           @id @default(cuid())
    name             String?
    numberOfMessages Int
    messages         Message[]
    members          UserInChatroom[]
}

model UserInChatroom {
    id         String   @id @default(cuid())
    chatroomId String
    userId     String
    chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
    user       User     @relation(fields: [userId], references: [id])
}

model UserInGroup {
    id      String @id @default(cuid())
    groupId String @unique
    userId  String @unique
    group   Group  @relation(fields: [groupId], references: [id])
    user    User   @relation(fields: [userId], references: [id])
}

model UserInActivity {
    id         String   @id @default(cuid())
    activityId String   @unique
    userId     String   @unique
    activity   Activity @relation(fields: [activityId], references: [id])
    user       User     @relation(fields: [userId], references: [id])
    Group      Group[]
}

enum Visibility {
    Private
    Public
}

model Group {
    id              String           @id @default(cuid())
    coverPhoto      String?
    description     String?
    name            String
    organizerId     String
    requireApproval Boolean          @default(false)
    sportId         String?
    UserInActivity  UserInActivity[]
    organizer       User             @relation(fields: [organizerId], references: [id])
    members         UserInGroup[]
    sport           Sport?           @relation(fields: [sportId], references: [id])
    visibility      Visibility       @default(Public)
}

model Message {
    id         String   @id @default(cuid())
    message    String
    chatroomId String
    senderId   String
    delivered  Boolean  @default(false)
    chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
    sender     User     @relation(fields: [senderId], references: [id])
}

model Notification {
    id          String           @id @default(cuid())
    expires     DateTime
    isRead      Boolean          @default(false)
    message     String
    recipientId String
    extra       Json
    recipient   User             @relation(fields: [recipientId], references: [id])
    type        NotificationType @default(SYSTEM)
}

// model OnlineUser {
//     user   User   @relation(fields: [userId], references: [id])
//     userId String @unique
// }

model Sport {
    id               String         @id @default(cuid())
    featureAvailable Boolean        @default(false)
    name             String
    value            String
    mode             String
    Activity         Activity[]
    Group            Group[]
    UserSettings     UserSettings[]
}

enum Permission {
    ACTIVITIES_VIEW
    ACTIVITIES_CREATE
    ACTIVITIES_DELETE
    ACTIVITIES_REGISTER
    GROUP_CREATE
    GROUP_DELETE
    GROUP_SEARCH
    USERS_VIEW_ALL
    USERS_VIEW_DETAIL
    SEND_MESSAGES
    NOTIFICATIONS_RECEIVE
    GOOGLE_SEARCH
    MAP_VIEW
}

model User {
    id                  String        @id @default(cuid())
    accountType         AccountType   @default(DEFAULT)
    avatar              String
    bio                 String?
    city                String?
    email               String        @unique
    emailVerified       Boolean       @default(false)
    fullName            String
    isInactive          Boolean       @default(false)
    inactiveDate        DateTime
    joinDate            DateTime
    localeRegion        String?
    matchOrganizedCount Int
    matchPlayedCount    Int
    password            String
    permissions         String
    phone               String?
    settings            UserSettings?
    reliability         Int
    role                Role          @default(USER)
    sexe                Sexe
    timezone            DateTime
    username            String        @unique
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @updatedAt

    Message      Message[]
    groups       UserInGroup[]
    chatrooms    UserInChatroom[]
    activities   UserInActivity[]
    Activity     Activity[]
    Group        Group[]
    Notification Notification[]
}

model UserSettings {
    id                    String  @id @default(cuid())
    userId                String  @unique
    preferredSportId      String
    preferredLocale       Locale  @default(EN)
    preferredTheme        Theme   @default(LIGHT)
    preferredRegion       String
    allowLocationTracking Boolean @default(false)
    showAge               Boolean @default(false)
    showEmail             Boolean @default(false)
    showPhone             Boolean @default(false)
    showGroups            Boolean @default(false)

    preferredSport Sport? @relation(fields: [preferredSportId], references: [id])
    user           User   @relation(fields: [userId], references: [id])
}

enum AccountType {
    APPLE
    DEFAULT
    FACEBOOK
    GOOGLE
    GUEST
}

enum Role {
    ADMIN
    USER
}

enum Sexe {
    FEMALE
    MALE
}

enum Theme {
    DARK
    LIGHT
}

enum Locale {
    EN
    FR
}

enum GroupRole {
    ADMIN
    MEMBER
    OWNER
}

enum NotificationType {
    FRIEND
    GLOBAL
    GROUP
    LIKE
    MESSAGE
    SYSTEM
}
